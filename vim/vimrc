" appearance
packadd! onedark.vim
let g:onedark_termcolors=256
syntax on
colorscheme onedark
let g:airline_theme='onedark'
" highlights columns for 80 and 120 character limits
if exists('&colorcolumn')
    set colorcolumn=88,120
endif
" highlight commands must go after 'syntax on'
highlight Visual cterm=reverse ctermbg=NONE
set relativenumber
set number
set scrolloff=5
set incsearch
" ctrl+m (for 'mark') to toggle highlight.
let hlstate=1
nnoremap <c-m> :if (hlstate%2 == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=hlstate+1<cr>
" vim-matchup
let g:matchup_matchparen_deferred = 1
let g:matchup_matchparen_hi_surround_always = 1
" rainbow
let g:rainbow_active = 1
let g:rainbow_conf = {
    \ 'operators': '',
    \ 'ctermfgs':
        \ ['gray', 'white', 'darkgray', 'lightgray', 'black']
\ }
" change cursor shape based on mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" working with multiple files
set splitright
set splitbelow
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" code folding
set foldmethod=indent
set foldlevelstart=99 "no closed folds w/ each new buffer"
nnoremap <space> za

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"commenting and options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Create default mappings
let g:NERDCreateDefaultMappings = 1
" Add spaces after comment delimiters by default
" let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
" let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" netrw
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" remove header
let g:netrw_banner = 0
" set netrw size to 1/3 of current pane
let g:netrw_winsize = 33

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set leader key to comma (,)
let mapleader = ","
" Navigation
nnoremap <leader>f :FZF<cr>
" yank behavior
vnoremap y ygv<Esc> " keep cursor position after yank
" <leader>s to search word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/
" <leader>p to execute python code highlighted in visual mode
xnoremap <leader>p :w !python<cr>
" quick save
nnoremap <leader>w :w<cr>
" quick save and quit
nnoremap <leader>x :x<cr>
" quick explore
nnoremap <leader>e :Ex<cr>
" quick buffer switch
nnoremap <leader><leader> <C-^>
" quick quit
nnoremap <leader>q :q<cr>

" should speed up macros and large pastes
set lazyredraw

" do not look for vim settings at the beginning and end of files
set nomodeline

" typing behavior
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set backspace=indent,eol,start

" search behavior, ignore case when search all lowercase
set ignorecase
set smartcase

" File type specific settings
" markdown
autocmd FileType markdown
    \ setlocal textwidth=120 |
" python
autocmd FileType python
    \ setlocal tabstop=4 |
    \ setlocal softtabstop=4 |
    \ setlocal shiftwidth=4 |
    \ setlocal textwidth=120 |
    \ setlocal expandtab |
    \ setlocal autoindent |
    \ setlocal fileformat=unix
let g:ale_linters = {'python': ['flake8', 'mypy']}
" FIXERS HAD TO GO AFTER LOADING ALE...
" make
autocmd FileType make setlocal noexpandtab

" packages
set rtp+=~/dotfiles/cli-tools/fzf

" Put these lines at the very end of your vimrc file.
" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL

" python
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['black', 'isort', 'remove_trailing_lines', 'trim_whitespace'],
\   'markdown': []
\}
let g:ale_fix_on_save = 1

" Run :DiffOrig to see a side by side comparison of unsaved changes
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
          \ | wincmd p | diffthis
    endif
